# 手写promise

```js

  const PENDING = 'pending';
    const FULFILLED = 'fulfilled';
    const REJECTED = 'rejected';
function myPromise(executor){
  this.state = PENDING
  this.value = null
  this.reason = null
  this.onFulfilledCallbacks = [];
  this.onRejectedCallbacks  = [];
  const resolve = (value)=>{
    if(this.state==PENDING){
      this.state = FULFILLED
      this.value = value
      this.onFulfilledCallbacks.forEach(element => {
        element()
      });
    }
  }
  const reject = (value)=>{
    if(this.state==PENDING){
      this.state = REJECTED
      this.reason = value
      this.onRejectedCallbacks.forEach(fun=>{
        fun()
      })
    }
  }
  try {
    executor(resolve,reject)
  } catch(reason) {
    reject(reason)
  }
}
// 异步调用：状态还是PENDING，将onFulfilled、onRejected分别加入两个函数数组onFulfilledCallbacks、onRejectedCallbacks，
// 当异步调用resolve和reject时，将两个数组中绑定的事件循环执行
// 代码是同步的，new Promise（）.then()。会立刻执行，但是newpromise是个异步事件，会先执行then（）函数。所以需要用数组先把then中的函数存储起来
new myPromise()
myPromise.prototype.then = function(onFulfilled,onRejected){
  switch (this.state){
    case FULFILLED:
    setTimeout(()=>{
      onFulfilled(this.value)
    },0)
    break;
    case REJECTED:
    setTimeout(()=>{
      onRejected(this.reason)
    },0)
    break;
    case PENDING:
    this.onFulfilledCallbacks.push(()=>[
      setTimeout(()=>{
        onFulfilled(this.value)
      },0)
    ])
    this.onRejectedCallbacks.push(()=>{
      setTimeout(() => {
        try {
          const x = onRejected(this.reason);
          resolve(x);
        } catch (reason) {
          reject(reason);
        }
      }, 0);
    })
    break;
  }

}
myPromise.prototype.catch = function(onRejected) {
  return this.then(null,onRejected)
}
// 说明调用catch就相当于调用then，他只是让我们少去传null，reject的一步
myPromise.prototype.finally = function(fn) {
  return this.then(value=>{
    fn()
    return value
  },reason=>{
    fn()
    throw reason
  })
}
// finally也是用那个then来实现，让reject和resolve两个函数都调用finally中的函数
myPromise.resolve = function(value){
  return new myPromise((resolve,reject)=>{
    resolve(value)
  })
}
myPromise.reject = function(reason){
  return new myPromise((resolve,reject)=>{
    reject(reason)
  })
}
myPromise.all = function(promises){
  return new myPromise((resolve,reject)=>{
    if(promises.length===0){
      resolve([])
    } else {
      let result = []
      let index = 0
      for(let i=0;i<promises.length;i++){
        promises[i].then(data=>{
          result[i] = data;
          if(++index===promises.length){
            // 把前面所有的resolve的结果放到一个数组里面。如果该数组都被放满了，那么就执行resolve（结果数组）
            resolve(result)
          }
        }, err=>{
          reject(err);
          return;
        })
      }
    }
  })
}
myPromise.race = function(promises){
  return new myPromise(resolve,reject){
    if(promises.length===0){
      resolve([])
    } else {
      for(let i=0;i<promises.length;i++){
        promises[i].then(value=>{
          resolve(value)
        },err=>{
          reject(err)
          return
        })
      }
    }
  }
}
```

```

 // 这个一定会在new promise之后执行，也就是等到new中resolve（val）调用了，才会执行then中第一个参数resolve函数
// promise的关键，就是利用异步任务之间的顺序性。把then后面的操作，包装成一个异步任务，
// 由于创建的顺序，new promise（异步任务）这个异步任务一定比then中要执行的任务晚.这样就达到了承诺的作用
实现promise关键，是把then中的任务包装成异步，执行顺序，会让之前加入的异步任务先执行，这样实现promise功能
then的链式调用，每调用一个then，都是一个新的promise。
所以
// 每个this单独的回调，所以，回调这中只需要一个元素就行
console.log('then'+this.onFulfilledCallbacks.length)
这个变量，只会有一个回调函数


不对，是then中把成功和失败的回调函数放入回调队列中，当异步任务结束，触发resolve方法，把成功回调的函数执行。

上述代码的思路也很简单，就是通过setTimeout机制，将resolve中执行回调的逻辑放置到JS任务队列末尾，以保证在resolve执行时，then方法的回调函数已经注册完成.

所以，为啥说promise中then是个微任务
then函数是同步的，他会讲回调函数放入队列中。但是在new promise中，resolve方法的调用，一定是个异步任务
加入延时机制
细心的同学应该发现，上述代码可能还存在一个问题：如果在then方法注册回调之前，resolve函数就执行了，怎么办？比如promise内部的函数是同步函数：
我现在支持下面这种延迟。这样就保证then的回调函数都注册完成之后，resolve再执行
// 例3
function getUserId() {
    return new Promise(function (resolve) {
        resolve(9876);
    });
}
getUserId().then(function (id) {
    // 一些处理
});
这显然是不允许的，Promises/A+规范明确要求回调需要通过异步方式执行，用以保证一致可靠的执行顺序。因此我们要加入一些处理，保证在resolve执行之前，then方法已经注册完所有的回调。我们可以这样改造下resolve函数:

function resolve(value) {
    setTimeout(function() {
        callbacks.forEach(function (callback) {
            callback(value);
        });
    }, 0)
} 
上述代码的思路也很简单，就是通过setTimeout机制，将resolve中执行回调的逻辑放置到JS任务队列末尾，以保证在resolve执行时，then方法的回调函数已经注册完成.

但是，这样好像还存在一个问题，可以细想一下：如果Promise异步操作已经成功，这时，在异步操作成功之前注册的回调都会执行，但是在Promise异步操作成功这之后调用的then注册的回调就再也不会执行了，这显然不是我们想要的。


```

![image-20200919110115686](imge/image-20200919110115686.png)

## then的链式调用

```js
const PENDING = 'pending';
    const FULFILLED = 'fulfilled';
    const REJECTED = 'rejected';
function myPromise(executor){
  this.state = PENDING
  this.value = null
  this.reason = null
  this.onFulfilledCallbacks = [];
  this.onRejectedCallbacks  = [];
  const resolve = (value)=>{
    console.log(this.onFulfilledCallbacks.length+'resolve')
    if(this.state==PENDING){
      this.state = FULFILLED
      this.value = value
      this.onFulfilledCallbacks.forEach(element => {
        element()
      });
    }
  }
  const reject = (value)=>{
    console.log(this.onFulfilledCallbacks.length+'reject')
    if(this.state==PENDING){
      this.state = REJECTED
      this.reason = value
      this.onRejectedCallbacks.forEach(fun=>{
        fun()
      })
    }
  }
  try {
    executor(resolve,reject)
  } catch(reason) {
    reject(reason)
  }
}
// 异步调用：状态还是PENDING，将onFulfilled、onRejected分别加入两个函数数组onFulfilledCallbacks、onRejectedCallbacks，
// 当异步调用resolve和reject时，将两个数组中绑定的事件循环执行
// 代码是同步的，new Promise（）.then()。会立刻执行，但是newpromise是个异步事件，会先执行then（）函数。所以需要用数组先把then中的函数存储起来
// new myPromise()
// myPromise.prototype.then = function(onFulfilled,onRejected){
//   switch (this.state){
//     case FULFILLED:
//     setTimeout(()=>{
//       onFulfilled(this.value)
//     },0)
//     break;
//     case REJECTED:
//     setTimeout(()=>{
//       onRejected(this.reason)
//     },0)
//     break;
//     case PENDING:
//     this.onFulfilledCallbacks.push(()=>[
//       // 这个一定会在new promise之后执行，也就是等到new中resolve（val）调用了，才会执行then中第一个参数resolve函数
//       // promise的关键，就是利用异步任务之间的顺序性。把then后面的操作，包装成一个异步任务，
//       // 由于创建的顺序，new promise（异步任务）这个异步任务一定比then中要执行的任务晚.这样就达到了承诺的作用
//       setTimeout(()=>{
//         onFulfilled(this.value)
//       },0)
//     ])
//     this.onRejectedCallbacks.push(()=>{
//       setTimeout(() => {
//         try {
//           // 这一步，保证返回的还是
//           const x = onRejected(this.reason);
//           // resolve(x);
//         } catch (reason) {
//           reject(reason);
//         }
//       }, 0);
//     })
//     break;
//   }
// }
myPromise.prototype.then = function (onFulfilled, onRejected) {
    // 执行了new 就是把promise参数中的这个函数执行了，
      const promise2 = new myPromise((resolve, reject) => {
        // console.log(this.state+'then')
        switch (this.state) {
          case FULFILLED:
            setTimeout(() => {
              try {
                const x = onFulfilled(this.value);
                resolve(x);
              } catch (reason) {
                reject(reason);
              }
            }, 0);
            break;
          case REJECTED:
            setTimeout(() => {
              try {
                const x = onRejected(this.reason);
                resolve(x);
              } catch (reason) {
                reject(reason);
              }
            }, 0);
            break;
          case PENDING:
            this.onFulfilledCallbacks.push(() => {
              setTimeout(() => {
                try {
                  const x = onFulfilled(this.value);
                  resolve(x);
                } catch (reason) {
                  reject(reason);
                }
              }, 0);
            })
            this.onRejectedCallbacks.push(() => {
              setTimeout(() => {
                try {
                  const x = onRejected(this.reason);
                  resolve(x);
                } catch (reason) {
                  reject(reason);
                }
              }, 0);
            })
            break;
        }
      })
      // 每个this单独的回调，所以，回调这中只需要一个元素就行
    console.log('then'+this.onFulfilledCallbacks.length)
      return promise2;
    }
// then是同步的，链式调用了几次，数组中就有几个，
new myPromise((resolve,reject)=>{
  setTimeout(()=>{
    reject(1)
  },3000)
}).then(()=>{
  console.log('resolve')
  // promse1
},()=>{
  console.log('reject')
}).then(()=>{
  console.log(1)
  // prmoes2
})
```

