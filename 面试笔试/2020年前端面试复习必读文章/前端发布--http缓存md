# 前端部署的发展历程

https://juejin.im/post/5e6836cc51882549052f56f5

为了更清晰地理解前端部署的发展史，了解部署时运维和前端（或者更广泛地说，业务开发人员）的职责划分，当每次前端部署发生改变时，可以思考两个问题

1. 缓存，前端应用中http 的 `response header` 由谁来配？得益于工程化发展，可以对打包后得到带有 hash 值的文件可以做永久缓存
2. 跨域，`/api` 的代理配置由谁来配？在开发环境前端可以开个小服务，启用 `webpack-dev-server` 配置跨域，那生产环境呢

----

## 利用Webpack实现资源增量更新

一个比较好的解决方案是利用Webpack在编译阶段为输出文件加上**hash指纹（根据模块内容计算得出），**从而实现前端静态资源的增量更新。

例如之前的截图中，index.86191.js文件的86191即为一个hash指纹。**当该文件内容或其依赖的模块的内容发生变化时，这个数字将发生变化。在生成带有新的hash指纹的资源文件后，我们只须要将它们放入入口Html（入口Html不被缓存），**如下图：



![img](https://pic4.zhimg.com/80/v2-6e42070231c794cb80a8d28c35787d7b_720w.png)

**浏览器解析新的Html后将去请求新的资源文件（index.53214.js），而非加载本地旧文件的缓存（index.86191.js）。**



另外，可以利用**HtmlWebpackPlugin**把新生成的js自动加入到Html中。

html不缓存，

