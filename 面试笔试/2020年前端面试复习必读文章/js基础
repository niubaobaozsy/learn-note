# js基础

## 执行上下文/作用域链/闭包

1，执行上下文

执行上下文分为全局上下文，函数执行上下文

js引擎会维护一个调用栈，函数执行完之后，该执行上下文就会从栈中弹出

创建执行上下文有两个阶段

1，创建阶段

在创建阶段会发生三件事：

1. **this** 值的决定，即我们所熟知的 **This 绑定**。
2. 创建**词法环境**组件。
3. 创建**变量环境**组件。

现在，在词法环境的**内部**有两个组件：(1) **环境记录器**和 (2) 一个**外部环境的引用**。

1. **环境记录器**是存储变量和函数声明的实际位置。
2. **外部环境的引用**意味着它可以访问其父级词法环境（作用域）。

变量环境

它同样是一个词法环境，其环境记录器持有**变量声明语句**在执行上下文中创建的绑定关系。

如上所述，变量环境也是一个词法环境，所以它有着上面定义的词法环境的所有属性。

在 ES6 中，**词法环境**组件和**变量环境**的一个不同就是前者被用来存储函数声明和变量（`let` 和 `const`）绑定，而后者只用来存储 `var` 变量绑定

----

## 原型链

![img](https://user-gold-cdn.xitu.io/2019/2/24/1691fc878b9beefa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)





![image-20200510174007803](imge/image-20200510174007803.png)



> JavaScript 只有一种结构：对象。每个实例对象（ object ）都有一个私有属性（称之`__proto__` ）指向它的构造函数的原型对象（**prototype** ）

**JavaScript 中万物皆对象，而对象皆出自构造（构造函数）**。

上图中，你疑惑的点是不是 `Function` 和 `new Function` 的关系。其实是这样子的：

```
Function.__proto__ === Function.prototype//true
Function.prototype（prototype原型对象就是构造器） 就是定义function的那个声明函数对象
```

### `__proto__`

> 首先我们需要明确两点：1️⃣`__proto__`和`constructor`是**对象**独有的。2️⃣`prototype`属性是**函数**独有的；

但是在 JavaScript 中，函数也是对象，所以函数也拥有`__proto__`和 `constructor`属性。

![image-20200510175021326](imge/image-20200510175021326.png)

`__proto__`属性既不能被 `for in` 遍历出来，也不能被 `Object.keys(obj)` 查找出来

https://mp.weixin.qq.com/s/1UDILezroK5wrcK-Z5bHOg

笔记：

prototype是一个对象开放给其他对象用来共享属性。也就是别的对象可以通过prototype来共享属性

规范中明确描述了所有对象，都有一个隐式引用，它被称之为这个对象的 prototype 原型。

什么叫隐式引用？



![img](https://mmbiz.qpic.cn/mmbiz_png/PeB3s8AJwnZQlqXh6BNEBBOPuppuPpXV1I2eAAltI8MJfU1lDJysGh7trfST6alZnNSl1crSuNdcAZUIXe1c2g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)



如上图所示，在我们编写的代码里，只声明了 obj 对象的 a 和 b 两个属性。

。也就是说，所谓的隐式，是指不是由开发者(你和我)亲自创建/操作

因此，情况是这样的，ECMAScript 规范说 prototype 应当是一个隐式引用:



1）通过 Object.getPrototypeOf(obj) 间接访问指定对象的 prototype 对象。



2）通过 Object.setPrototypeOf(obj, anotherObj) 间接设置指定对象的 prototype 对象。



3）部分浏览器提前开了 __proto__ 的口子，使得可以通过 obj.__proto__ 直接访问原型，通过 obj.__proto__ = anotherObj 直接设置原型。



4）ECMAScript 2015 规范只好向事实低头，将 __proto__ 属性纳入了规范的一部分。

__proto__ 属性既不能被 for in 遍历出来，也不能被 Object.keys(obj) 查找出来。



访问对象的 obj.__proto__ 属性，默认走的是 Object.prototype 对象上 __proto__ 属性的 get/set 方法。



![img](https://mmbiz.qpic.cn/mmbiz_png/PeB3s8AJwnZQlqXh6BNEBBOPuppuPpXVhuiatYwcESJxONJH9diaEwHiaic8s3OBHfGHIc7UG3WQ8AiaJ1B9Nu2gibJg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)



通过覆盖 Object.prototype.__proto__ 我们可以看到，访问普通对象的 __proto__ 触发了 Object.prototype 上的 __proto__ 的 get 方法。

（下面没看懂，但是明白了`obj.__proto__`只想Object.prototype （）  Object是什么，是定义的Object函数对象）

因此，普通对象创建时，只需要将它内部的隐式引用指向 Object.prototype 对象，就能兼容 __proto__ 属性访问行为，不需要将原型隐式挂载到对象的 __proto__ 属性。

---

自己理解基础

![image-20200511091446456](imge/image-20200511091446456.png)

![image-20200511091708662](imge/image-20200511091708662.png)

其实就是一种指向的关系，让一个函数的所有实例都能共享一些属性和方法

Funtion是一个构造函数，Function.prototype是构造函数的原型对象

Function.prototype.constructor指向的是构造函数Function。就是每个构造函数的原型对象都有一个属性叫constuctor指向构造函数。

`(new Function()).__proto__`指向Function.prototype。实例对象的`__proto__`指向构造函数的原型对象。简称原型对象。

----

Object.setPropertyOf 和 Object.create 的差别在于：



1）Object.setPropertyOf，给我两个对象，我把其中一个设置为另一个的原型。

2）Object.create，给我一个对象，它将作为我创建的新对象的原型

面试官：**谈谈你对 JS 原型和原型链的理解？**

候选人：JS 原型是指为其它对象提供共享属性访问的对象。在创建对象时，每个对象都包含一个隐式引用指向它的原型对象或者 null。

原型也是对象，因此它也有自己的原型。这样构成一个原型链。

面试官：**原型链有什么作用？**

候选人：在访问一个对象的属性时，实际上是在查询原型链。这个对象是原型链的第一个元素，先检查它是否包含属性名，如果包含则返回属性值，否则检查原型链上的第二个元素，以此类推。

面试官：**那如何实现原型继承呢？**

候选人：有两种方式。一种是通过 Object.create 或者 Object.setPrototypeOf 显式继承另一个对象，将它设置为原型。

**另一种是通过 constructor 构造函数，在使用 new 关键字实例化时，会自动继承 constructor 的 prototype 对象，作为实例的原型。**

**在 ES2015 中提供了 class 的风格，背后跟 constructor 工作方式一样，写起来更内聚一些。**

面试官：**ConstructorB 如何继承 ConstructorA ？**

候选人：JS 里的继承，是对象跟对象之间的继承。constructor 的主要用途是初始化对象的属性。

因此，两个 Constructor 之间的继承，需要分开两个步骤。

第一步是，编写新的 constructor，将两个 constructor 通过 call/apply 的方式，合并它们的属性初始化。按照超类优先的顺序进行。

第二步是，取出超类和子类的原型对象，通过 Object.create/Object.setPrototypeOf 显式原型继承的方式，设置子类的原型为超类原型。

整个过程手动编写起来比较繁琐，因此建议通过 ES2015 提供的 class 和 extends 关键字去完成继承，它们内置了上述两个步骤。

（这个地方没懂，需要另外好好看看。）

组合继承？

```js
Animal.prototype.greet = function(sound) {    

  console.log(sound);   

}     
// 声明子类   

function Dog(color) { 
  // 构造函数继承    
  Animal.apply(this, arguments);   
}   
// 类式继承
Dog.prototype = new Animal();   
Dog.prototype.construtor = Dog
var dog = new Dog('白色');   
var dog2 = new Dog('黑色');     
dog.type.push('dog');   
console.log(dog.color); // "白色"
console.log(dog.type);  // ["pig", "cat", "dog"]
console.log(dog2.type); // ["pig", "cat"]
console.log(dog2.color);  // "黑色"
dog.greet('汪汪');  // "汪汪"
```



面试官：**看起来你挺了解原型，你能说一个原型里比较少人知道的特性吗？**

候选人：在 ES3 时代，只有访问属性的 get 操作能触发对原型链的查找。在 ES5 时代，新增了 accessor property 访问器属性的概念。它可以定义属性的 getter/setter 操作。

具有访问器属性 setter 操作的对象，作为另一个对象的原型的时候，设置属性的 set 操作，也能触发对原型链的查找。

普通对象的` __proto__ `属性，其实就是在原型链查找出来的，它定义在 Object.prototype 对象上。

面试官：很好，你被录取了，明天就来上班，我们有个基于 prototype.js 的老项目，很久没人能维护了。

> **ConstructorB 如何继承 ConstructorA ？**
>
> 

-----

## Promise

```js
  <script>
    const PENDING = 'pending';
    const FULFILLED = 'fulfilled';
    const REJECTED = 'rejected';

    function MyPromise(executor) {
      this.state = PENDING;
      this.value = null;
      this.reason = null;
      this.onFulfilledCallbacks = [];
      this.onRejectedCallbacks = [];

      const resolve = (value) => {
        if (this.state === PENDING) {
          this.state = FULFILLED;
          this.value = value;
          debugger
          this.onFulfilledCallbacks.forEach(fun => {
            fun();
          });
        }
      }

      const reject = (reason) => {
        if (this.state === PENDING) {
          this.state = REJECTED;
          this.reason = reason;
          debugger
          this.onRejectedCallbacks.forEach(fun => {
            fun();
          });
        }
      }

      try {
        executor(resolve, reject);
      } catch (reason) {
        reject(reason);
      }
    }

    MyPromise.prototype.then = function (onFulfilled, onRejected) {
      if (typeof onFulfilled != 'function') {
        onFulfilled = function (value) {
          return value;
        }
      }
      if (typeof onRejected != 'function') {
        onRejected = function (reason) {
          throw reason;
        }
      }
      const promise2 = new MyPromise((resolve, reject) => {
        debugger
        // 上面一个实例的this.state状态
        switch (this.state) {
          case FULFILLED:
            setTimeout(() => {
              try {
                const x = onFulfilled(this.value);
                resolve(x);
              } catch (reason) {
                reject(reason);
              }
            }, 0);
            break;
          case REJECTED:
          // 虽然resolve是同步执行的，我们必须保证then是异步调用的，我们用settimeout来模拟异步调用（并不能实现微任务和宏任务的执行机制，只是保证异步调用）
          // 在这里实现了异步调用
            setTimeout(() => {
              try {
                // 就执行then中的reject参数
                const x = onRejected(this.reason);
                
                // 如果成功当前的then的状态为fullfilled
                // resolve的this是当前新创建的promise
                resolve(x);
              } catch (reason) {
                reject(reason);
              }
            }, 0);
            break;
          case PENDING:
            this.onFulfilledCallbacks.push(() => {
              setTimeout(() => {
                try {
                  const x = onFulfilled(this.value);
                  resolve(x);
                } catch (reason) {
                  reject(reason);
                }
              }, 0);
            })
            this.onRejectedCallbacks.push(() => {
              setTimeout(() => {
                try {
                  const x = onRejected(this.reason);
                  resolve(x);
                } catch (reason) {
                  reject(reason);
                }
              }, 0);
            })
            break;
        }
      })
      return promise2;
    }

    new MyPromise((resolve, reject) => {
        console.log('初始化');
        setTimeout(()=>{
          reject()
        },1000)
    })
    .then(() => {
      console.log('执行「这个」”');
    },()=>{
      console.log('失败1执行这个')
    })
    .then(() => {
      setTimeout(()=>{
        console.log('执行「这个」111”');
      },1000)
    },()=>{
      console.log('失败1执行这个11')
    })
    .then(() => {
        console.log('执行「这个」，无论前面发生了什么');
    },()=>{
      console.log('失败1执行这个2')
    });
    console.log(0)
    // then里面执行的代码会比new Promise里面的代码晚执行，异步调用
  </script>
```



经过多次实验，this.onFulfilledCallbacks这些调用数组，一直只会有一个元素。因为传参只会传一个函数，当前的this就then新创建的this

思路：

```js
      case REJECTED:
      // 虽然resolve是同步执行的，我们必须保证then是异步调用的，我们用settimeout来模拟异步调用（并不能实现微任务和宏任务的执行机制，只是保证异步调用）
      // 在这里实现了异步调用
        setTimeout(() => {
          try {
            // 就执行then中的reject参数
            const x = onRejected(this.reason);
            
            // 如果成功当前的then的状态为fullfilled
            // resolve的this是当前新创建的promise
            resolve(x);
          } catch (reason) {
            reject(reason);
          }
        }, 0);
```
在根据then之前的状态执行完对应的状态函数之后，成功就调用resolve（）表示当前then的promise成功，返回then这个priomise。

为什么可以链式调用then，因为每一个then都会创建一个新的promise并返回。

## finally方法

不管是`resolve`还是`reject`都会调用`finally`。

```js
MyPromise.prototype.finally = function(fn) {
    return this.then(value => {
       fn();
       return value;
    }, reason => {
        fn();
        throw reason;
    });
};
```

## all方法

接受一个`promise`数组，当所有`promise`状态`resolve`后，执行`resolve`

```js
    MyPromise.all = function (promises) {
      return new Promise((resolve, reject) => {
        if (promises.length === 0) {
          resolve([]);
        } else {
          let result = [];
          let index = 0;
          for (let i = 0; i < promises.length; i++) {
            promises[i].then(data => {
              result[i] = data;
              if (++index === promises.length) {
                resolve(result);
              }
            }, err => {
              reject(err);
              return;
            });
          }
        }
      });
    }
```

## [#](http://www.conardli.top/docs/JavaScript/模拟实现promise.html#race方法)race方法

接受一个`promise`数组，当有一个`promise`状态`resolve`后，执行`resolve`

```js
    MyPromise.race = function (promises) {
      return new Promise((resolve, reject) => {
        if (promises.length === 0) {
          resolve();
        } else {
          let index = 0;
          for (let i = 0; i < promises.length; i++) {
            promises[i].then(data => {
              resolve(data);
            }, err => {
              reject(err);
              return;
            });
          }
        }
      });
    }
```

后面这两个函数选看

### 当 async/await 遇上 forEach

自己重新写用for循环写，或者用for of 

 每次调用 `next` 方法都返回一个对象，其中 `done` 和 `value` 属性用来表示遍历是否结束和当前遍历的属性值，当 `done` 的值为 `true` 时，遍历就停止了。

https://objcer.com/2017/10/12/async-await-with-forEach/

```js
async function async1() {    
  console.log('async1 start');
  await async2();    
  console.log('async1 end');
}
//相当于
async function async1() {
    console.log('async1 start');  
    Promise.resolve(async2()).then(() => {  
    console.log('async1 end');  
    })
}
```

## 事件机制

一句话理解：一次事件循环回来后，开始去执行 `Task Queue` 中的 `task`，但是这里的 `task` 有**优先级**。所以优先执行 `MicroTask Queue` 中的 task ，执行完后在执行`MacroTask Queue` 中的 task

**浏览器环境下，microtask的任务队列是每个macrotask执行完之后执行**

执行完一个宏任务之后，把微任务清空

![image-20200511164720289](imge/image-20200511164720289.png)

node不会咋办

webpack

算法

