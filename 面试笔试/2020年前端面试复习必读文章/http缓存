# http缓存

强制缓存，未过期不用校验，直接使用缓存

**Expires**

Expires的值为服务端返回的到期时间，即下一次请求时，请求时间小于服务端返回的到期时间，直接使用缓存数据

所以HTTP 1.1 的版本，使用Cache-Control替代。

**Cache-Control**

Cache-Control 是最重要的规则。常见的取值有private、public、no-cache、max-age，no-store，默认为private。

```
private:             客户端可以缓存
public:              客户端和代理服务器都可缓存（前端的同学，可以认为public和private是一样的）
max-age=xxx:   缓存的内容将在 xxx 秒后失效
no-cache:          需要使用对比缓存来验证缓存数据（后面介绍）
no-store:           所有内容都不会缓存，强制缓存，对比缓存都不会触发
```

协商缓存

**Last-Modified / If-Modified-Since**

Last-Modified：服务器在响应请求时，告诉浏览器资源的最后修改时间。

![img](https://user-gold-cdn.xitu.io/2017/8/22/53399e6fdae3663582b4eacf6a83ad2c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)

If-Modified-Since：

再次请求服务器时，通过此字段通知服务器上次请求时，服务器返回的资源最后修改时间。

服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。

若资源的最后修改时间大于If-Modified-Since，说明资源又被改动过，则响应整片资源内容，返回状态码200；若资源的最后修改时间小于或等于If-Modified-Since，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。

![img](https://user-gold-cdn.xitu.io/2017/8/22/fd379f9eb07037e7dc3d0854237001cf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)

**Etag / If-None-Match（优先级高于Last-Modified / If-Modified-Since）**

第一次客户端访问资源的时候，服务端返回资源内容的同时返回了ETag：1234，告诉客户端：这个文件的标签是1234，我如果修改了我这边的资源的话，这个标签就会不一样了。

第二次客户端访问资源的时候，由于缓存中已经有了Etag为1234的资源，客户端要去服务端查询的是这个资源有木有过期呢？所以带上了If-None-Match: 1234。告诉服务端：如果你那边的资源还是1234标签的资源，你就返回304告诉我，不需要返回资源内容了。如果不是的话，你再返回资源内容给我就行了。服务端就比较下Etag来看是返回304还是200。

![img](https://user-gold-cdn.xitu.io/2017/8/22/a9f97f1bf78e39d0b5da940feeb07d46?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)

**很清晰，强制缓存，就是Expires  expires时间内，cache-control中的max-age。**

**那么当时间过了，或者cache-control字段为no-cache时，需要协商验证缓存**

**协商缓存有两种，一种是验证文件最后修改时间，一种是验证文件最后修改内容**

**Etag（服务端响应） / If-None-Match （客户端请求）**

**（优先级高于Last-Modified （服务端响应） / If-Modified-Since（客户端请求））**