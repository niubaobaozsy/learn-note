0-1背包问题

![image-20201031165051527](imge/image-20201031165051527.png)

**表格的意思： 背包容量为j的时候，前i个物品组成的最大价值**

**填表格有两个选择：把当前物品装入背包，不装入背包，不装入，就等于`dp[i-1][j]`i-i个物品能装多少**

**装入，就判断`dp[i-1][j-当前物品的重量]+物品的重量`前提是能装，所以至少背包有多余的重量，就可以装，也能拿到，对应的dp**

```js
//by 司徒正美
 function knapsack(weights, values, W){
    var n = weights.length -1
    var f = [[]]
    for(var j = 0; j <= W; j++){
        if(j < weights[0]){ //如果容量不能放下物品0的重量，那么价值为0
           f[0][j] = 0
        }else{ //否则等于物体0的价值
           f[0][j] = values[0]
        }
    }
    for(var j = 0; j <= W; j++){
        for(var i = 1; i <= n; i++ ){
            if(!f[i]){ //创建新一行
                f[i] = []
            }
            if(j < weights[i]){ //等于之前的最优值
                f[i][j] = f[i-1][j]
            }else{
                f[i][j] = Math.max(f[i-1][j], f[i-1][j-weights[i]] + values[i]) 
            }
        } 
    }
    return f[n][W]
}
var a = knapsack([2,2,6,5,4],[6,3,5,4,6],10)
console.log(a)
```

## 完全背包

## 完全背包问题

### 2.1 问题描述：

有{n}*n*件物品和{1}1个容量为W的背包。每种物品没有上限，第{i}*i*件物品的重量为{weights[i]}*w**e**i**g**h**t**s*[*i*]，价值为{values[i]}*v**a**l**u**e**s*[*i*]，求解将哪些物品装入背包可使价值总和最大。

### 2.2 问题分析：

最简单思路就是把完全背包拆分成01背包，就是把01背包中状态转移方程进行扩展，也就是说01背包只考虑放与不放进去两种情况，而完全背包要考虑 放0、放1、放2...的情况，

![clipboard.png](https://segmentfault.com/img/bV1ZOy?w=1418&h=776)

这个k当然不是无限的，它受背包的容量与单件物品的重量限制，即{j/weights[i]}*j*/*w**e**i**g**h**t**s*[*i*]。假设我们只有1种商品，它的重量为20，背包的容量为60，那么它就应该放3个，在遍历时，就0、1、2、3地依次尝试。

程序需要求解{n*W}*n*∗*W*个状态，每一个状态需要的时间为{O（W/w_i）}*O*（*W*/*w**i*），总的复杂度为{O(nW*Σ(W/w_i))}*O*(*n**W*∗Σ(*W*/*w**i*))。

我们再回顾01背包经典解法的核心代码

```
for(var i = 0 ; i < n ; i++){ 
   for(var j=0; j<=W; j++){ 
       f[i][j] = Math.max(f[i-1][j], f[i-1][j-weights[i]]+values[i]))
      }
   }
}
```

现在多了一个k，就意味着多了一重循环

```
for(var i = 0 ; i < n ; i++){ 
   for(var j=0; j<=W; j++){ 
       for(var k = 0; k < j / weights[i]; k++){
          f[i][j] = Math.max(f[i-1][j], f[i-1][j-k*weights[i]]+k*values[i]))
        }
      }
   }
}
```

javascript的完整实现：

```
function completeKnapsack(weights, values, W){
    var f = [], n = weights.length;
    f[-1] = [] //初始化边界
    for(var i = 0; i <= W; i++){
        f[-1][i] = 0
    }
    for (var i = 0;i < n;i++){
        f[i] = new Array(W+1)
        for (var j = 0;j <= W;j++) {
            f[i][j] = 0;
            var bound = j / weights[i];
            for (var k = 0;k <= bound;k++) {
                f[i][j] = Math.max(f[i][j], f[i - 1][j - k * weights[i]] + k * values[i]);
            }
        }
    }
    return f[n-1][W];
}
//物品个数n = 3，背包容量为W = 5，则背包可以装下的最大价值为40.
var a = completeKnapsack([3,2,2],[5,10,20], 5) 
console.log(a) //40
```

### 2.3 O(nW)优化

我们再进行优化，改变一下f思路，让{f(i,j)}*f*(*i*,*j*)表示出在前i种物品中选取若干件物品放入容量为j的背包所得的最大价值。

所以说，对于第i件物品有放或不放两种情况，而放的情况里又分为放1件、2件、......{j/w_i}*j*/*w**i*件

如果不放, 那么{f(i,j)=f(i-1,j)}*f*(*i*,*j*)=*f*(*i*−1,*j*)；如果放，那么当前背包中应该出现至少一件第i种物品，所以f(i,j)中至少应该出现一件第i种物品,即{f(i,j)=f(i,j-w_i)+v_i}*f*(*i*,*j*)=*f*(*i*,*j*−*w**i*)+*v**i*，为什么会是{f(i,j-w_i)+v_i}*f*(*i*,*j*−*w**i*)+*v**i*？

因为我们要把当前物品i放入包内，因为物品i可以无限使用，所以要用{f(i,j-w_i)}*f*(*i*,*j*−*w**i*)；如果我们用的是{f(i-1,j-w_i)}*f*(*i*−1,*j*−*w**i*)，{f(i-1,j-w_i)}*f*(*i*−1,*j*−*w**i*)的意思是说，我们只有一件当前物品i，所以我们在放入物品i的时候需要考虑到第i-1个物品的价值{f(i-1,j-w_i)}*f*(*i*−1,*j*−*w**i*)；但是现在我们有无限件当前物品i，我们不用再考虑第i-1个物品了，我们所要考虑的是在当前容量下是否再装入一个物品i，而{(j-w_i)}(*j*−*w**i*)的意思是指要确保{f(i,j)}*f*(*i*,*j*)至少有一件第i件物品，所以要预留c(i)的空间来存放一件第i种物品。总而言之，如果放当前物品i的话，它的状态就是它自己"i"，而不是上一个"i-1"。

所以说状态转移方程为：

![clipboard.png](https://segmentfault.com/img/bV1ZOF?w=1120&h=104)

与01背包的相比，只是一点点不同，我们也不需要三重循环了

![clipboard.png](https://segmentfault.com/img/bV1ZOI?w=1086&h=112)

javascript的完整实现：

```
function unboundedKnapsack(weights, values, W) {
    var f = [],
        n = weights.length;
    f[-1] = []; //初始化边界
    for (let i = 0; i <= W; i++) {
        f[-1][i] = 0;
    }
    for (let i = 0; i < n; i++) {
        f[i] = [];
        for (let j = 0; j <= W; j++) {
            if (j < weights[i]) {
                f[i][j] = f[i - 1][j];
            } else {
                f[i][j] = Math.max(f[i - 1][j], f[i][j - weights[i]] + values[i]);
            }
        }
        console.log(f[i].concat());//调试
    }
    return f[n - 1][W];
}

var a = unboundedKnapsack([3, 2, 2], [5, 10, 20], 5); //输出40
console.log(a);
var b = unboundedKnapsack([2, 3, 4, 7], [1, 3, 5, 9], 10); //输出12
console.log(b);
```

> 为什么可以优化，因为0-1背包，当可以装i物品的时候

![image-20201031171420295](imge/image-20201031171420295.png)

**上一行很多都是不变的。因为，就算能选择装，也是考虑前i-1个物品的最大值。如果是完全背包，就是考虑前i个再加一个当前物品的价值的总价值**

## 多重背包问题

https://segmentfault.com/a/1190000012829866

### 3.2 问题分析：

多重背包就是一个进化版完全背包。在我们做完全背包的第一个版本中，就是将它转换成01背包，然后限制k的循环

直接套用01背包的一维数组解法

```js
function knapsack(weights, values, numbers,  W){
    var n = weights.length;
    var f= new Array(W+1).fill(0)
    for(var i = 0; i < n; i++) {
        for(var k=0; k<numbers[i]; k++)//其实就是把这类物品展开，调用numbers[i]次01背包代码  
         for(var j=W; j>=weights[i]; j--)//正常的01背包代码  
             f[j]=Math.max(f[j],f[j-weights[i]]+values[i]);  
    }
    return f[W];
}
var b = knapsack([2,3,1 ],[2,3,4],[1,4,1],6)
console.log(b)
```

