# vue面试题



![1565855552060](image/1565855552060.png)active-class是哪个组件的属性？

vue-router模块的router-link组件  

#### axios？？？？

![1565860028168](image/1565860028168.png)

> 创建前/后： 在beforeCreated阶段，vue实例的挂载元素$el和数据对象data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，$el还没有。
>
>  载入前/后：在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染。  
>
> 更新前/后：当data变化时，会触发beforeUpdate和updated方法。  
>
> 销毁前/后：在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在

## 1， Vue 如何去除 URL 中的#

`vue-router` 默认使用 `hash` 模式，所以在路由加载的时候，项目中的 URL 会自带 “#”。如果不想使用 “#”， 可以使用 `vue-router` 的另一种模式 `history`：

```
newRouter({  mode: 'history',  routes: [ ]})
```

需要注意的是，当我们启用 `history` 模式的时候，由于我们的项目是一个单页面应用，所以在路由跳转的时候，就会出现访问不到静态资源而出现 “404” 的情况，这时候就需要服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 “index.html” 页面。

-----

- `beforeCreated()`：在实例创建之间执行，数据未加载状态。
- `created()`：在实例创建、数据加载后，能初始化数据，DOM 渲染之前执行。
- `beforeMount()`：虚拟 DOM 已创建完成，在数据渲染前最后一次更改数据。
- `mounted()`：页面、数据渲染完成，真实 DOM 挂载完成。
- `beforeUpadate()`：重新渲染之前触发。
- `updated()`：数据已经更改完成，DOM 也重新 render 完成，更改数据会陷入死循环。
- `beforeDestory()` 和 `destoryed()`：前者是销毁前执行（实例仍然完全可用），后者则是销毁后执行

----

## 为什么vue中组件中data需要用函数返回

当用new Vue()创建vue实例时data是个对象

```vue
// 该对象被加入到一个 Vue 实例中
var vm = new Vue({
  data: { a: 1 }
})
```

当使用Vue.component创建是data是个对象

**返回一个唯一的对象，不要和其他组件共用一个对象进行返回**

```vue
Vue.component('my-component', {
  template: '<div>OK</div>',
  data() {
    return {} // 返回一个唯一的对象，不要和其他组件共用一个对象进行返回
  },
})
```

why

1，Vue.component的作用是注册全局组件

注：如果在一个业务组件中使用了，并成功注册了（在new Vue(）调用之前使用）。那么这个业务组件中引用并使用的所有子组件都能使用该组件。

> todo:　为什么要在beforeCreate生命周期使用Vue.component能成功，每个生命周期具体干了什么

Vue.component用法：注册或获取全局组件。注册还会自动使用给定的 `id` 设置组件的名称

```
// 注册组件，传入一个扩展过的构造器
Vue.component('my-component', Vue.extend({ /* ... */ }))

// 注册组件，传入一个选项对象 (自动调用 Vue.extend)
Vue.component('my-component', { /* ... */ })

// 获取注册的组件 (始终返回构造器)
var MyComponent = Vue.component('my-component')
```

Vue.extend：使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。

`data` 选项是特例，需要注意 - 在 `Vue.extend()` 中它必须是函数

```
<div id="mount-point"></div>
// 创建构造器
var Profile = Vue.extend({
  template: '<p>{{firstName}} {{lastName}} aka {{alias}}</p>',
  data: function () {
    return {
      firstName: 'Walter',
      lastName: 'White',
      alias: 'Heisenberg'
    }
  }
})
// 创建 Profile 实例，并挂载到一个元素上。
new Profile().$mount('#mount-point')
```

也就是说明了，为啥使用Vue.component中的data需要使用函数。

我们写的业务组件也是同理，我们写的是一个**组件的注册器**。如果data是个对象，每个引用这个组件（创建这个实例）拿到的都是共用同一份data对象，而不是每次都创建一个新的data对象。这是js语言决定的

```
var MyComponent = function() {}
MyComponent.prototype.data = {
  a: 1,
  b: 2,
}
var MyComponent = function() {
  this.data = this.data()
}
MyComponent.prototype.data = function() {
  return {
    a: 1,
    b: 2,
  }
}
```

