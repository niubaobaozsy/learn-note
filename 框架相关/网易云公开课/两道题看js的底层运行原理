![1585750238062](imge/1585750238062.png)

先打印p1：因为是把异步操作完成之后要进行的操作放入异步操作中。所以先执行p1

---

![1585752331563](imge/1585752331563.png)

![1585752353367](imge/1585752353367.png)

![1585752631360](imge/1585752631360.png)

![1585752662609](imge/1585752662609.png)

---

v8引擎

![1585752877350](imge/1585752877350.png)

![1585752899360](imge/1585752899360.png)

![1585753236885](imge/1585753236885.png)

新生代：刚申明的变量，老生代：存活了很久都没有被回收的变量

新生代中from和to如何处理

当from中内存超过一半，就会把活着的变量标记复制放到to中,不存活的变量清理掉

to的内存超过一半，就会把活着的标记放到from中

如果一个变量经历过一次复制放到to中，并且to中的内存已经超过了一半，就会被放到老生代中

from-》to-》老

![1585753702747](imge/1585753702747.png)

![1585753769088](imge/1585753769088.png)

![1585808920171](imge/1585808920171.png)

 null是关键字，但是undefined是变量和window一个级别

![1585811681899](imge/1585811681899.png)

缓存是全局的，，不断放就会引起程序崩溃

对缓存的大小加个限制

![1585812153879](imge/1585812153879.png)

点的运算符优先级最高。先执行a.x

![1585812274972](imge/1585812274972.png)

老生代如何回收

新生代：复制

老生代：标记删除整理 （删除之后的数据不连续，）

![1585812513895](imge/1585812513895.png)

---

void 是一个运算符，

JS中的void是一个运算符，它对紧跟其后的表达式求值。不管是什么表达式，void总是返回undefined。

https://juejin.im/post/5d9f1a67f265da5bb977ca8c

1，避免污染环境

2，函数总是返回undefined

3，判断是否为underfined

# [null 与 undefined的区别](http://chenguangliang.com/blog/null与undefined的区别)

### 一 定义

null 是 javascript 的关键字，表示一个特殊值，常用来描述"空值"，typeof 运算返回"object"，所以可以将 null 认为是一个特殊的对象值，含义是"非对象"。

undefined 是预定义的全局变量，他的值就是"未定义"， typeof 运算返回 "undefined"

```
typeof null; // "object"
typeof undefined; // "undefined"
```

### 二 转义

转换成 Boolean 时均为 false，转换成 Number 时有所不同

```
!!(null); // false
!!(undefined); // false
Number(null); // 0
Number(undefined); // NaN

null == undefined; //true
null === undefined; //false
```

### 三 判定

```
isNull = function (obj) {
  return obj === null;
}
isUndefined = function (obj) {
  return obj === void 0;
}
```

----



